[position]
include => hangup

exten => s,1,Verbose(3,LOG ${heronum} Position)
same => n,Verbose(3, LOG ${heronum} position is X=${Xgps} Y=${Ygps} )
same => n,Verbose(3, LOG ${heronum} MOVEMENT_FIND_FOOTPRINT:${GET_MOVEMENT_FIND_FOOTPRINT(${heronum},${MAPNO})})
same => n(steps),Playback(dungeon/steps)
same => n,GosubIf($[${RAND(1,100)} < ${stepcount}]?random-encounter,s,1) 
;db check if room is empty 
same => n,Gosub(debug,s,1(steps))
same => n,GosubIf(${EXISTS(${GET_MOVEMENT_ROOM_INFO(${mXgps},${mYgps},${MAPNO})})}?room_check)
same => n,Gosub(torch_handle,s,1)
same => n,GotoIf($[${runaway} = 1]?runaway)                           ; If they return after escaping a monster or closed door don't save position 
same => n,ExecIf($[${mXgps} = ${Xgps}]?Set(Ygps=${mYgps}):Set(Xgps=${mXgps}))
same => n,NoOp(x:${Xgps} y:${Ygps} mx:${mXgps}, my:${mYgps})
same => n,Verbose(3, LOG ${heronum} save position is X=${Xgps} Y=${Ygps} ${PUT_MOVEMENT_SAVE_FOOTPRINT(${Xgps},${Ygps},${heronum},${MAPNO})}) ; save current position
same => n,Set(ARRAY(mXgps,mYgps=${Xgps},${Ygps}))
same => n,Gosub(debug,s,1(position))
;same => n,GosubIf($[${HASH(movement_info,item)} > 0]?attack,s,1)
same => n(return),Return
same => n(runaway),Verbose(3, Run away) ; run from monster or locked door
same => n,Gosub(debug,s,1(runaway))
same => n,Set(runaway=0)
same => n,Set(ARRAY(mXgps,mYgps)=${Xgps},${Ygps})
same => n,Goto(return)
;
same => n(room_check),Verbose(3, See what is in this room)
same => n,Gosub(debug,s,1(room_check))
  same => n,Set(LOCAL(room_info)=${GET_MOVEMENT_ROOM_INFO(${mXgps},${mYgps},${MAPNO})})
  same => n,Set(LOCAL(room_contents)=${FIELDQTY(room_info,^)})
  same => n,Set(LOCAL(counter)=1)
  same => n,While($[${counter} < $[${room_contents}+1]])
    same => n,Set(LOCAL(current_item)=${CUT(room_info,^,${counter})})
    same => n,GosubIf($["${current_item:0:1}" = "m"]?attack,s,1(${current_item:1}))
    same => n,GosubIf($["${current_item:0:1}" = "t"]?trap,s,1(${current_item:1}))
    same => n,GosubIf($["${current_item:0:1}" = "s"]?message,s,story(${current_item}))
  same => n,EndWhile(${INC(counter)})
same => n,Return

[torch_handle]
exten => s,1,Verbose(3,LOG ${heronum} torch handler)
 same => n,ExecIf($[${torch} = 1]?Playback(dungeon/compass/lightsout)) ; If they have 1 torch left play sound as it runs out
 same => n,ExecIf($[${torch} > 0]?Set(torch=$[${torch}-1]))
 same => n,Return

[compass]
include => hangup

exten => s,1,Verbose(3,LOG ${heronum} Compass subroutine)
same => n,Set(HASH(footprints)=${GET_MOVEMENT_FIND_FOOTPRINT(${heronum},${MAPNO})})
same => n,Gosub(debug,s,1(compass))
;same => n,Playback(dungeon/compass/${GET_MOVEMENT_GPS(${HASH(footprints,gps_xpos)},${HASH(footprints,gps_ypos)})}${RAND(1,2)})
same => n,Return(${GET_MOVEMENT_GPS(${HASH(footprints,gps_xpos)},${HASH(footprints,gps_ypos)},${MAPNO})}${RAND(1,2)})
same => n(goposition),Set(runaway=0)
same => n,NoOp(runaway: ${runaway})
same => n,Gosub(position,s,1)
same => n(movement),Goto(dungeon,s,movement)

exten => 2,1,Verbose(3,LOG ${heronum} North)
same => n,GosubIf($[${GET_DUNGEON_SEE_DOOR(${Xgps},${MATH(${Ygps}+1,i)},${MAPNO})}]?doorway,s,1)
same => n,GotoIf($[${runaway}=1]?compass,s,goposition)
same => n,ExecIf($[${ISNULL(${GET_MOVEMENT_GPS(${HASH(footprints,gps_xpos)},${MATH(${HASH(footprints,gps_ypos)}+1)},${MAPNO})})}]?Goto(ww,1):Set(mYgps=${MATH(${Ygps}+1,i)}))
same => n,Gosub(position,s,1)
same => n,Goto(dungeon,s,movement)

exten => 6,1,Verbose(3,LOG ${heronum} East)
same => n,GosubIf($[${GET_DUNGEON_SEE_DOOR(${Xgps},${MATH(${Ygps}+1,i)},${MAPNO})}]?doorway,s,1)
same => n,GotoIf($[${runaway}=1]?compass,s,goposition)
same => n,ExecIf($[${ISNULL(${GET_MOVEMENT_GPS(${MATH(${HASH(footprints,gps_xpos)}+1)},${HASH(footprints,gps_ypos)},${MAPNO})})}]?Goto(ww,1):Set(mXgps=${MATH(${Xgps}+1,i)}))
same => n,Gosub(position,s,1)
same => n,Goto(dungeon,s,movement)

exten => 4,1,Verbose(3,LOG ${heronum} West)
same => n,GosubIf($[${GET_DUNGEON_SEE_DOOR(${Xgps},${MATH(${Ygps}+1,i)},${MAPNO})}]?doorway,s,1)
same => n,GotoIf($[${runaway}=1]?compass,s,goposition)
same => n,ExecIf($[${ISNULL(${GET_MOVEMENT_GPS(${MATH(${HASH(footprints,gps_xpos)}-1)},${HASH(footprints,gps_ypos)},${MAPNO})})}]?Goto(ww,1):Set(mXgps=${MATH(${Xgps}-1,i)}))
same => n,Gosub(position,s,1)
same => n,Goto(dungeon,s,movement)

exten => 8,1,Verbose(3,LOG ${heronum} South)
same => n,GosubIf($[${GET_DUNGEON_SEE_DOOR(${Xgps},${MATH(${Ygps}+1,i)},${MAPNO})}]?doorway,s,1)
same => n,GotoIf($[${runaway}=1]?compass,s,goposition)
same => n,ExecIf($[${ISNULL(${GET_MOVEMENT_GPS(${HASH(footprints,gps_xpos)},${MATH(${HASH(footprints,gps_ypos)}-1)},${MAPNO})})}]?Goto(ww,1):Set(mYgps=${MATH(${Ygps}-1,i)}))
same => n,Gosub(position,s,1)
same => n,Goto(dungeon,s,movement)
;
;
exten => 7,1,Verbose(3,LOG ${heronum} use a torch)
same => n,GotoIf($[${GET_HERO_TORCH(${heronum})} < 1]?nolight)
same => n,Playback(dungeon/compass/torchlight)
same => n,Goto(dungeon,s,movement)
same => n(nolight),Verbose(3, LOG ${heronum} no torches to light)
same => n,Playback(dungeon/compass/notorches)
same => n,Goto(dungeon,s,movement)


exten => 5,1,Verbose(3,LOG ${heronum} Item search)
same => n,Gosub(search,s,1)
same => n,Goto(dungeon,s,movement)
;`
same => n,Playback(dungeon/item/youve-found)
same => n,Set(LOCAL(items)=${GET_DUNGEON_ITEMS(${Xgps},${Ygps},${MAPNO})})
same => n,GotoIf($[${LEN(${items})}=0]?empty)
same => n,Goto(${GET_DUNGEON_ITEMS(${Xgps},${Ygps},${MAPNO})})
same => n(torch),Verbose(3 LOG ${heronum} Found the Torch)
same => n,Playback(dungeon/item/${GET_DUNGEON_ITEMS(${Xgps},${Ygps})})
same => n,Set(torch=1); meed to fix
same => n,Verbose(3,LOG ${heronum} torch is ${torch} eval is ${EVAL(${torch})})
same => n,Gosub(position,s,1)
same => n(empty),Verbose(3,LOG ${heronum} nothing here)
same => n,Playback(dungeon/item/empty)
same => n,Gosub(position,s,1)
same => n,Goto(dungeon,s,movement)


exten => i,1,Verbose(3,LOG ${heronum} Invalid entry)
same => n,Goto(dungeon,s,movement)

exten => ww,1,Verbose(3,LOG ${heronum} Wrong Way)
;secret room check
same => n,Playback(dungeon/compass/wrongway)
same => n,Playback(silence/2)
same => n,Goto(dungeon,s,movement)
same => n(secret),Verbose(3 ${heronum} secret room found)
