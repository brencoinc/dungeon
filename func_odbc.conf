;
; func_odbc.conf
;
; Each context is a separately defined function.  By convention, all
; functions are entirely uppercase, so the defined contexts should also
; be all-uppercase, but there is nothing that enforces this.  All functions
; are case-sensitive, however.
;
; For substitution, you have ${ARG1}, ${ARG2} ... ${ARGn}
; for the arguments to each SQL statement.
;
; In addition, for write statements, you have ${VAL1}, ${VAL2} ... ${VALn}
; parsed, just like arguments, for the values.  In addition, if you want the
; whole value, never mind the parsing, you can get that with ${VALUE}.
;
;
; If you have data which may potentially contain single ticks, you may wish
; to use the dialplan function SQL_ESC() to escape the data prior to its
; inclusion in the SQL statement.
;
;
; The following options are available in this configuration file:
;
; readhandle   A comma-separated list of DSNs (from res_odbc.conf) to use when
;              executing the readsql statement.  Each DSN is tried, in
;              succession, until the statement succeeds.  You may specify up to
;              5 DSNs per function class.  If not specified, it will default to
;              the value of writehandle or dsn, if specified.
; writehandle  A comma-separated list of DSNs (from res_odbc.conf) to use when
;              executing the writesql statement.  The same rules apply as to
;              readhandle.  "dsn" is a synonym for "writehandle".
; readsql      The statement to execute when reading from the function class.
; writesql     The statement to execute when writing to the function class.
; insertsql    The statement to execute when writing to the function class
;              succeeds, but initially indicates that 0 rows were affected.
; prefix       Normally, all function classes are prefixed with "ODBC" to keep
;              them uniquely named.  You may choose to change this prefix, which
;              may be useful to segregate a collection of certain function
;              classes from others.
; escapecommas This option may be used to turn off the default behavior of
;              escaping commas which occur within a field.  If commas are
;              escaped (the default behavior), then fields containing commas
;              will be treated as a single value when assigning to ARRAY() or
;              HASH().  If commas are not escaped, then values will be separated
;              at the comma within fields.  Please note that turning this option
;              off is incompatible with the functionality of HASH().
; synopsis     Appears in the synopsis field for the command
;              'core show function <function name>'
; mode         This option may be set to 'multirow' to allow the function
;              specified to return more than a single row.  However, this
;              changes the way that func_odbc normally works.  Instead of the
;              invocation of the function returning a row, it returns an opaque
;              ID, which may be passed to ODBC_FETCH() to return each row in
;              turn.  ODBC_FETCH_STATUS returns SUCCESS or FAILURE, to indicate
;              whether any results were stored, and you should call ODBC_Finish
;              on the ID to clean up any remaining results when you are done
;              with the query.  Also, the variable ODBCROWS is set initially,
;              which may be used in an iterative fashion to return each row in
;              the result.
;              Please note that multirow queries are isolated to the channel,
;              and rows may not be fetched outside of the channel where the
;              query was initially performed.  Additionally, as the results are
;              associated with a channel, mode=multirow is incompatible with
;              the global space.
; rowlimit     Rowlimit limits the total number of rows which can be stored for
;              that query.  For mode=multirow, otherwise, func_odbc will
;              attempt to store all rows in the resultset, up to the maximum
;              amount of memory.  In normal mode, rowlimit can be set to allow
;              additional rows to be fetched, rather than just the first one.
;              These additional rows can be returned by using the name of the
;              function which was called to retrieve the first row as an
;              argument to ODBC_FETCH().


; ODBC_SQL - Allow an SQL statement to be built entirely in the dialplan
[SQL]
dsn=mysql1
readsql=${ARG1}

; ODBC_ANTIGF - A blacklist.
[ANTIGF]
dsn=mysql1,mysql2   ; Use mysql1 as the primary handle, but fall back to mysql2
                    ; if mysql1 is down.  Supports up to 5 comma-separated
                    ; DSNs.  "dsn" may also be specified as "readhandle" and
                    ; "writehandle", if it is important to separate reads and
                    ; writes to different databases.
readsql=SELECT COUNT(*) FROM exgirlfriends WHERE callerid='${SQL_ESC(${ARG1})}'
syntax=<callerid>
synopsis=Check if a specified callerid is contained in the ex-gf database

; ODBC_PRESENCE - Retrieve and update presence
;[PRESENCE]
;dsn=mysql1
;readsql=SELECT location FROM presence WHERE id='${SQL_ESC(${ARG1})}'
;writesql=UPDATE presence SET location='${SQL_ESC(${VAL1})}' WHERE id='${SQL_ESC(${ARG1})}'
;
;
;
;
;
;
;Hero functions

[HERO_NEWHERO]
prefix=PUT
dsn=asterisk
readsql=INSERT INTO players (caller_id) VALUES ('${SQL_ESC(${ARG1})}')
synopsis=create a new player based on the caller ID

[HERO_NEWSESSION]
prefix=PUT
dsn=asterisk
readsql=INSERT INTO sessions (caller_id) VALUES ('${SQL_ESC(${ARG1})}')
synopsis=create a new player based on the caller ID

[HERO_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT health,weapon_mod,weapon_name,strength,torch,doorkeys,agility,hero_luck
readsql+= FROM players WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return agent stats
;
[HERO_STATS]
prefix=PUT
dsn=asterisk
readsql=UPDATE players SET health='${ARG1}', weapon_mod='${ARG2}', agility='${ARG3}', strength='${ARG4}', hero_luck='${ARG5}' WHERE caller_id='${SQL_ESC(${ARG6})}'
synopsis=Return agent stats

;
[HERO_UPDATE_HEALTH]
prefix=PUT
dsn=asterisk
readsql=update players SET health=('${SQL_ESC(${ARG1})}') WHERE caller_id=('${SQL_ESC(${ARG2})}')
synopsis=update health after a battle

;
[HERO_HEALTH]
prefix=GET
dsn=asterisk
readsql=SELECT health FROM players WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return Health value if this CID has an existing record. Also used to check if record exits

[HERO_WEAPON]
prefix=GET
dsn=asterisk
readsql=SELECT weapon_mod FROM players player WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return Health weapons value

[HERO_TORCH]
prefix=GET
dsn=asterisk
readsql=SELECT torch FROM players WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return number of torches value

;Movement functions

[MOVEMENT_GPS]
prefix=GET
dsn=asterisk
readsql=SELECT paths FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND yaxis='${SQL_ESC(${ARG2})}'
synopsis=Return movement options

[MOVEMENT_MONSTER_KEY]
prefix=GET
dsn=asterisk
readsql=SELECT monster_key FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND
readsql+= yaxis='${SQL_ESC(${ARG2})}'
synopsis=Return monster key value

[MOVEMENT_ROOM_INFO]
prefix=GET
dsn=asterisk
readsql=SELECT monster_key,item,doorway FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND
readsql+= yaxis='${SQL_ESC(${ARG2})}'
synopsis=Return room items

[MOVEMENT_FIND_FOOTPRINT]
prefix=GET
dsn=asterisk
readsql=SELECT gps_xpos,gps_ypos FROM sessions where caller_id='${SQL_ESC(${ARG1})}'
synopsis=Read current location in dungeon

[MOVEMENT_SAVE_FOOTPRINT]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET gps_xpos='${SQL_ESC(${ARG1})}',gps_ypos='${SQL_ESC(${ARG2})}' WHERE caller_id='${SQL_ESC(${ARG3})}'
synopsis=Save location in dungeon

;Monster Functions

[DUNGEON_MONSTER_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT monster_key,monster_health,monster_attack,monster_agil,monster_name,monster_points FROM monster WHERE monster_key='${SQL_ESC(${ARG1})}' 
synopsis=Return monster stats

[DUNGEON_MONSTER_TOMBSTONE]
prefix=GET
dsn=asterisk
readsql=SELECT tombstones FROM sessions WHERE tombstones like '%${SQL_ESC(${ARG1})}%' AND caller_id='${SQL_ESC(${ARG2})}'
synopsis=Check if the monster is dead based on mkey and caller ID in sessions table

[DUNGEON_MONSTER_FUNERAL]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET tombstones = CONCAT(tombstones, '${SQL_ESC(${ARG1})}') where caller_id='${SQL_ESC(${ARG2})}'
synopsis=Put monster tombstone in session table

; Door Functions

[DUNGEON_CHECK_DOOR]
prefix=GET
dsn=asterisk
readsql=SELECT doors FROM sessions WHERE doors like '%${SQL_ESC(${ARG1})}%' AND caller_id='${SQL_ESC(${ARG2})}'
synopsis=Check if the door is open based on location in sessions table

[DUNGEON_OPEN_DOOR]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET doors = CONCAT(doors, '${SQL_ESC(${ARG1})}') where caller_id='${SQL_ESC(${ARG2})}'
synopsis=Mark open door in sessions table

;Item Functions

[ITEM_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT item_upc,item_name,item_mod_name,item_points,item_type FROM storehouse where item_type='${SQL_ESC(${ARG1})}' AND item_level='${SQL_ESC(${ARG2})}' ORDER BY RAND() LIMIT 1
synopsis=Select item details from Storehouse table

[ITEM_STATS]
prefix=PUT
dsn=asterisk
readsql=UPDATE players SET ${SQL_ESC(${ARG3})}='${SQL_ESC(${ARG4})}' where caller_id='${SQL_ESC(${ARG1})}'

[NEW_WEAPON]
prefix=PUT
dsn=asterisk
readsql=UPDATE players SET weapon_mod='${SQL_ESC(${ARG1})}', weapon_name='${SQL_ESC(${ARG2})}' where caller_id='${SQL_ESC(${ARG3})}'
synopsis=Sets weapon info in player table

[ONE_OFF]
prefix=PUT
dsn=asterisk
readsql=UPDATE ${SQL_ESC(${ARG1})} SET ${SQL_ESC(${ARG2})} = '${SQL_ESC(${ARG3})}' where caller_id='${SQL_ESC(${ARG4})}'
readsql=Update single value as needed
