[attack]
include => hangup

exten => s,1(start),Verbose(3, LOG ${heronum} Attack start)
same => n,Gosub(debug,s,1(attack))
same => n,Verbose(3, LOG ${heronum} Mkey is ${HASH(movement_info,monster_key)})
same => n,GotoIf($[${EXISTS(${GET_DUNGEON_MONSTER_TOMBSTONE(${MAPNO}-x${mXgps}y${mYgps},${heronum})})}]?deadmonster)
same => n,GoSub(monsterstats,s,1(${ARG1}))
same => n,Background(dungeon/attack)
same => n(begin),Verbose(3,LOG ${heronum} Battle Begins!)
same => n,Set(attack=1)
same => n,GotoIf($[${torch} > 0]?hattack)
same => n,Set(attacker=M)
same => n(fightround),Verbose(3,LOG ${heronum} Begin fight sequence)
;check if anyone died yet
same => n,GotoIf($[${monsterhealth} < 1]?victory)
same => n,GotoIf($[${herohealth} < 1]?defeat)
;
same => n,Set(attackroll=${RAND(1,20)})
same => n,Gotoif($[${attacker}=H]?hattack:mattack)
same => n(mattack),Verbose(3,LOG ${heronum} Begin Monster Attack Roll)
same => n,Set(attacker=M)
same => n,Set(who=monster)
same => n,Set(target=hero)
;set up enemy attack vs your health
same => n,Verbose(3, LOG ${heronum} Critical check)
same => n,Verbose(3,LOG ${heronum} ${who} Attack roll is ${attackroll} vs ${target} agility ${${target}_agil})
same => n,Goto(${RAND(1,2)},1)
;
;continue to hero attack
;
same => n(hattack),Verbose(3,LOG ${heronum} Begin Hero Attack)
;same => n,Set(attackroll=${RAND(1,20)})
same => n,NoOp(Attacker:${attacker} torch:${torch} isnull:${ISNULL(${attackroll})} ar:${attackroll})
same => n,ExecIf($[$[${torch} > 0] & ${ISNULL(${attackroll})}]?Set(attackroll=${RAND(5,20)}))
same => n,Set(attacker=H)
same => n,Set(who=hero)
same => n,Set(target=monster)
same => n,Verbose(3,LOG ${heronum} attackroll is ${attackroll})
same => n,Verbose(3, LOG ${heronum} weapon is ${${who}weapon})
;same => n,SendText(Roll is ${attackroll})
same => n,Background(dungeon/choseattack)
same => n,Background(dungeon/attack)
same => n,Goto(fightround)
;
same => n(miss),Verbose(3,LOG ${heronum} Miss!)
same => n,Playback(dungeon/${who}_miss)
same => n,ExecIf($[${attacker}=M]?Set(attacker=H):Set(attacker=M))
same => n,Goto(s,fightround)
;
same => n(victory),Verbose(3,LOG ${heronum} Vrictory!)
same => n,Gosub(debug,s,1(attach-victory))
same => n,Playback(dungeon/victory)
same => n,NoOp(Write health to record ${PUT_HERO_UPDATE_HEALTH(${herohealth},${heronum})})
same => n,NoOp(${PUT_DUNGEON_MONSTER_TOMBSTONE(${MAPNO}-x${mXgps}y${mYgps},${heronum})})
same => n,GoSub(stats_postbattle,s,1(${Xgps},${Ygps}))
same => n,GoSub(itemmaker,s,1)
same => n,GoSub(monsterstats,s,zeroout)
same => n,Return
;same => n,Goto(compass,s,1)
same => n,Hangup
same => n(defeat),Verbose(3, LOG ${heronum} You have been defeated)
;same => n,NoOp(Write health to record ${PUT_HERO_UPDATE_HEALTH(0,${heronum})})
same => n,Playback(dungeon/defeat)
same => n,GoSub(defeat,s,1)
same => n,Hangup
same => n(deadmonster),Verbose(3,Room has a dead monster)
;same => n,Playback(deadmonster)
same => n,Return
;
exten => 1,1,Verbose(3,LOG ${heronum} Standard Attack)
same => n,Verbose(3, LOG ${heronum} Critical check)
same => n,NoOp(Debug attackroll: ${attackroll}  who_agil:${${who}_agil}  who_agil/2: ${MATH(${${who}_agil}/2,i)})
same => n,GotoIf($[${MATH(${attackroll} + ${MATH(${${who}_agil}/2,i)})} > 100]?critical)
same => n,NoOp(Debug attackroll is ${attackroll} $[${target}_agil] is ${${target}_agil})
same => n,GotoIf($[${attackroll} < ${${target}_agil}]?s,miss)
same => n,Playback(dungeon/${who}_hit)
same => n,Gosub(fightshortener,s,1)
same => n,ExecIf($[${attacker}=M]?Set(attacker=H):Set(attacker=M))
same => n,Goto(s,fightround)

exten => 2,1,Verbose(3,LOG ${heronum} Vicious Attack)
;same => n,GotoIf($[${attackroll} < ${monster_agil}]?miss)
same => n,GotoIf($[${attackroll} < 15]?s,miss)
same => n(hit),Playback(dungeon/${who}_hit)
same => n,Set(attackholder=${attack})
same => n,Set(attack=${MATH(${attack} * 2,i)})
same => n,Gosub(fightshortener,s,1)
same => n,Set(attack=${attackholder})
same => n,Verbose(3,LOG ${heronum} ${who} health is ${${who}health})
;same => n,SayDigits(${${who}health})
same => n,ExecIf($[${attacker}=M]?Set(attacker=H):Set(attacker=M))
same => n,Goto(s,fightround)

exten => 3,1,Verbose(3,LOG ${heronum} Runaway)
same => n,GotoIf(${MATH(${attackroll} + ${${who}_agil},i)} > ${${who}_agil}?escape)
same => n,Background(dungeon/${who}_escapefail)
same => n,ExecIf($[${attacker}=M]?Set(attacker=H):Set(attacker=M))
same => n,Goto(s,fightround)
same => n(escape),Verbose(3,LOG ${heronum} escape)
same => n,Background(dungeon/${who}_escape)
same => n,NoOp(Write health to record ${PUT_HERO_UPDATE_HEALTH(${herohealth},${heronum})})
  same => n,Set(__runaway=1)
  same => n,Return
same => n,Goto(position,s,return)

exten => 4,1,Verbose(3,LOG ${heronum} Check inventory)
same => n,Playback(dungeon/noitems)
same => n,Goto(s,mattack)

exten => i,1(invalid),Verbose(3,LOG ${heronum} Invalid option)
same => n,GoTo(s,1)

[monsterstats]
include => hangup
    
exten => s,1,Verbose(3, LOG ${heronum} Monster Stats)
;same => n,Set(HASH(monster_stats)=${GET_DUNGEON_MONSTER_STATS(${GET_MOVEMENT_MONSTER_KEY(${mXgps},${mYgps})})})})
same => n,Set(HASH(monster_stats)=${GET_DUNGEON_MONSTER_STATS(${ARG1})})
same => n,Set(healthupdate=${HASH(monster_stats,monster_health)})
same => n,Set(monsterhealth=${HASH(monster_stats,monster_health)})
same => n,Set(monsterweapon=${HASH(monster_stats,monster_attack)})
same => n,Set(monster_agil=${HASH(monster_stats,monster_agil)})
same => n,Set(monstername=${HASH(monster_stats,monster_name)})
same => n,Set(monster_poison=${HASH(monster_stats,monster_poison)})  ; 1/100 chance of poisoning hero
same => n,Set(monster_points=${HASH(monster_stats,monster_points)})
same => n,Verbose(3,LOG ${heronum} Monster Strength is ${monsterhealth})
same => n,Verbose(3,LOG ${heronum} Monster Weapon is ${monsterweapon})
same => n,Verbose(3,LOG ${heronum} Monster Health is ${monsterhealth})
same => n,Verbose(3,LOG ${heronum} Hero health is ${herohealth})
same => n,Verbose(3,LOG ${heronum} Hero weapon is ${heroweapon})
;same => n,SendText(A ${monstername} appears!)
same => n,Return
;same => n(deadmonster),Verbose(3, LOG ${heronum} Monster Corpse)
;same => n,Set(deadmonster=1)
same => n(zeroout),Verbose(3, LOG ${heronum} Zero Out Monster Stats)
same => n,Set(healthupdate=0)
same => n,Set(monsterhealth=0)
same => n,Set(monsterweapon=0)
same => n,Set(monster_agil=0)
same => n,Set(monstername="")
same => n,Set(monster_points=0)
same => n,Return


[fightshortener]
include => hangup

exten => s,1,Verbose(3,LOG ${heronum} fight shortener)
same => n,Verbose(3,LOG ${heronum} attacker is ${who})
same => n,Verbose(3,LOG ${heronum} target is ${target})
same => n,Verbose(3,LOG ${heronum} health is ${${target}health})
same => n,Verbose(3,LOG ${heronum} weapon is ${${who}weapon})
same => n,Verbose(3,LOG ${heronum} attacker agility is ${${who}_agil})
same => n,Verbose(3,LOG ${heronum} target agility is ${${target}_agil})
same => n,Verbose(3,LOG ${heronum} ${target}health=${${target}health} - attack=${${who}weapon})
same => n,NoOp(Debug ${who}weapon:${${who}weapon} ${who}_agil: ${${who}_agil} math:${EVAL(${MATH(${${who}weapon}+${${who}_agil},i)})})
same => n,GosubIf($[${attacker}=H]?critcheck)
same => n,ExecIf($[${attackroll} = 20]?Set(attack_mod=2):Set(attack_mod=1))
same => n,NoOp(math is ${MATH(${attackroll} + ${MATH(${${who}_agil}/2,i)},i)})
;same => n,GotoIf($[${MATH(${attackroll} + ${MATH(${${who}_agil}/2,i)},i)} > 75]?critical)
same => n,Set(${target}health=${EVAL(${MATH(${${target}health}-$[${${who}weapon} * ${attack_mod}],i)})})
same => n,GoSub(poison_battle,s,1(${monster_poison}))
;same => n,SendText(${target}health is ${${target}health})
;same => n,SayDigits(${${target}health})
same => n,Return
;
same => n(critcheck),Verbose(3, Check for hero critical hit)
same => n,NoOp(ar: ${attackroll} hl:${hero_luck} math:$[${attackroll} + ${hero_luck}])
same => n,ExecIf($[$[${attackroll} + ${hero_luck}] > 19]?Set(attackroll=$[${attackroll} + ${hero_luck}])
same => n,Set(attack_mod=10); speed up fights in testing
same => n,Return
