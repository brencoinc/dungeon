[dungeon]
include => compass

exten => s,1(start),Verbose(3,Dungeon Start)
same => n,Set(LVL=0)
same => n,Set(encounter=0)
same => n,Set(attack=1)
same => n,Set(Room=s)
same => n,Set(herohealth=100)
same => n,Set(monsterhealth=100)
same => n,Set(heroweapon=1)
same => n,Set(monsterweapon=1)
same => n,Set(fighthealth=0)
same => n,Set(herostrike=10)
same => n,Set(monsterstrike=10)
same => n,Set(target=ghost)
same => n(movement),Verbose(3,movement)
same => n,background(dungeon/drip)
same => n,Goto(t,timeout)
same => n,hangup


exten => t,1(timeout),Verbose(3,timeout loop)
same => n,Goto($Room,1)
same => n,hangup

exten => i,1(invalid),Verbose(3,Invalid option)
same => n,GoTo(s,1)


[compass]
exten => s,1,Verbose(3,Compass subroutine)
same => n,Return

exten => 2,1,Verbose(3,North)
same => n,Set(GO=N)
same => n,Gosub(position,s,1)
same => n,Return

exten => 6,1,Verbose(3,East)
same => n,Set(GO=e)
same => n,Gosub(position,s,1)
same => n,Return

exten => 4,1,Verbose(3,West)
same => n,Set(GO=W)
same => n,Gosub(position,s,1)
same => n,Return

exten => 8,1,Verbose(3,North)
same => n,Set(GO=S)
same => n,Gosub(position,s,1)
same => n,Return

;with each step add a value to X, later make encounter - rand+x. 
;After a succesful encounter reset x to 0

exten => 9,1,Verbose(3,level test)
same => n,Set(LVL=$[${LVL}+1])
same => n,Gosub(position,s,1)
same => n,Hangup

[position]
exten => s,1,Verbose(3,Position)
same => n,Set(encounter=${RAND(1,20)})
same => n,Set(encounter=$[${encounter} + ${LVL}])
same => n,Verbose(3,Danger number is ${encounter})
same => n,Playback(dungeon/steps)
same => n,GotoIf($[${encounter} > 6]?attack)
same => n,Goto(dungeon,s,movement)
same => n(return),Return
same => n(attack),Gosub(attack,s,1)
same => n,Hangup

[attack]
exten => s,1(start),Verbose(3,Attack start)
same => n,Background(dungeon/attack)
same => n(begin),Verbose(3,Battle Begins!)
same => n,GoSub(monsterstats,s,1)
same => n,Verbose(3,Monster Level is ${monsterlvl})
same => n,Verbose(3,Monster Strength is ${monsterstr})
same => n,Verbose(3,Monster Attack is ${monsterattack})
same => n,Verbose(3,Monster Health is ${monsterhealth})
same => n,Verbose(3,Hero health is ${herohealth})
same => n,Verbose(3,Hero weapon is ${heroweapon})
same => n,Set(attack=1)
;roll for initiative
same => n,Gotoif($[${RAND(1,20)}>15]?hattack)

same => n(mattack),Verbose(3,Begin Attack Roll)
same => n,Set(who=monster)
same => n,Set(target=hero)
;check if monster is dead
same => n,GotoIf($[${monsterhealth} < 1]?victory)
;if not enemy gets first attack
;set up enemy attack vs your health
same => n,Verbose(3,Monster attack)
same => n,Set(attackroll=${RAND(1,20)})
same => n,Verbose(3,Monster Attack roll is ${attackroll})
same => n,GotoIf($[${attackroll} > 10]?mhit)
same => n,Verbose(3,Miss!)
same => n,Playback(dungeon/mmiss)
same => n,Goto(hattack)
;
same => n(mhit),Verbose(3,LOG Hit!)
same => n,Playback(dungeon/mhit)
same => n,Set(target=hero)
same => n,Gosub(fightshortener,s,1)
;same => n,Set(attack=${MATH(${attackroll} + ${weapon},i)})
;same => n,Set(attack=${EVAL(${attack})})
;same => n,Verbose(3,Modified attack is ${attack})
;same => n,Verbose(3,attackmath ${monsterhealth} - ${attack})
;same => n,Set(monsterhealth=${MATH(${health}-${attack},i)})
;same => n,Set(monsterhealth=${EVAL(${health})})
same => n,Verbose(3,LOG Hero health is ${herohealth})
same => n,SayDigits(${herohealth})
;same => n,Playback(silence/2)
same => n,GotoIf($[${herohealth} < 1]?defeat)
;
;
;continue to hero attack
;
same => n(hattack),Verbose(3,Begin Hero Attack)
same => n,Set(who=hero)
same => n,Set(target=monster)
same => n,Set(attackroll=${RAND(1,20)})
same => n,Verbose(3,LOG attackroll is ${attackroll})
same => n,NoOp(weapon is ${${who}weapon})
same => n,Set(attack=${MATH(${attackroll}+${${who}weapon},i)})
same => n,Set(attack=${EVAL(${attack})})
same => n,Background(dungeon/choseattack)
same => n,Background(dungeon/attack)
same => n,Goto(hattack)
same => n(victory),Verbose(3,Vrictory!)
same => n,Playback(dungeon/victory)
same => n,Goto(position,s,return)
same => n,Hangup

;
exten => 1,1,Verbose(3,LOG Standard Attack)
same => n,GotoIf($[${attack} < 5]?miss)
same => n,Playback(dungeon/hit)
same => n,Gosub(fightshortener,s,1)
;same => n,Set(thisattack=${MATH(${strike} + ${weapon},i)})
;same => n,Set(thisattack=${EVAL(${thisattack})})
;same => n,Set(monsterhealth=${MATH(${monsterhealth}-${thisattack},i)})
;same => n,Set(monsterhealth=${EVAL(${monsterhealth})})
same => n,Verbose(3,Monster health is ${monsterhealth})
same => n,SayDigits(${monsterhealth})
same => n,Playback(silence/2)
same => n,Goto(s,mattack)
same => n(miss),Verbose(3,Attack Missed!)
same => n,Playback(dungeon/hmiss)
same => n,Goto(s,mattack)
same => n,Hangup

exten => 2,1,Verbose(3,Standard Attack)
same => n,GotoIf($[${attack} < 10]?miss)
same => n(hit),Playback(dungeon/hit)
same => n,Gosub(fightshortener,s,1)
;same => n,Set(thisattack=${MATH(${strike} + ${weapon},i)})
;same => n,Set(thisattack=${EVAL(${thisattack})})
;same => n,Set(thisattack=${MATH(${thisattack} * 3,i)})
;same => n,Set(thisattack=${EVAL(${thisattack})})
;same => n,Set(monsterhealth=${MATH(${monsterhealth}-${thisattack},i)})
;same => n,Set(monsterhealth=${EVAL(${monsterhealth})})
same => n,Verbose(3,Monster health is ${monsterhealth})
same => n,SayDigits(${monsterhealth})
same => n,Goto(s,mattack)
same => n(miss),Verbose(3,Attack Missed!)
same => n,Playback(dungeon/miss)
same => n,Goto(s,mattack)
same => n,Hangup

exten => 3,1,Verbose(3,Runaway)
;same => n,Set(attack=${MATH(${attack} + ${monsteragil},i)})
same => n,GotoIf($[${attack} > 15]?escape)
same => n,Goto(s,1)
same => n(escape),Verbose(3,escape)
;same => n,Background(dungeon/runaway)
same => n,Return

exten => 4,1,Verbose(3,Check inventory)
same => n,Playback(dungeon/noitems)
same => n,Goto(s,mattack)




exten => i,1(invalid),Verbose(3,Invalid option)
same => n,GoTo(s,1)

exten => 9,1,Verbose(3,begin attack)
same => n,Goto(s,begin)

[monsterstats]
exten => s,1,Verbose(3,Monster Stats)
same => n,Set(monsterlvl=2)
same => n,Set(monsterstr=${RAND(10,20)})
same => n,Set(monsterstrike=$[${monsterstr} * ${monsterlvl}])
;same => n,Set(monsterstrike=${EVAL(${monsterattack})})
same => n,set(monsterhealth=$[${RAND(20,30)} * ${monsterlvl}])
;same => n,Set(monsterhealth=${EVAL(${monsterhealth})})
same => n,Return

[fightshortener]
exten => s,1,Verbose(3, LOG fight shortener)
same => n,Verbose(3,LOG attacker is ${who})
same => n,Verbose(3,LOG target is ${target})
same => n,Verbose(3,LOG health is ${${target}health})
same => n,Verbose(3,LOG strike is ${strike})
same => n,Verbose(3,LOG weapon is ${${who}weapon})
  same => n,Set(attackroll=${RAND(1,20)})
  same => n,Verbose(3,LOG attackroll is ${attackroll})
  same => n,Set(attack=${MATH(${attackroll}+${${who}weapon},i)})
  same => n,Set(attack=${EVAL(${attack})})
  same => n,Set(health=${${target}health})
  same => n,Set(health=${MATH(${health}-${attack},i)})
  same => n,Set(health=${EVAL(${health})})
  same => n,Set(${target}health=${health})
  same => n,Set(who=ghost)
  same => n,Set(target=ghost)
  same => n,Return

