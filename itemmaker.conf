[itemmaker]
include => hangup

exten => s,1,Verbose(3, Begin Item decision tree)
  same => n,Verbose(3, Monster points: ${monster_points} top value $[${monster_points}+ ${hero_luck}])
  same => n,Set(LOCAL(itempt)=${RAND(1,$[${monster_points}+ ${hero_luck}])})
  same => n,Verbose(3, Item point:${itempt}) 
  same => n,Set(LOCAL(itemlevel)=7)
  same => n,ExecIf($[${itempt} > 9 ]?Set(__itemlevel=6)
  same => n,ExecIf($[${itempt} > 25 ]?Set(__itemlevel=5)
  same => n,ExecIf($[${itempt} > 50 ]?Set(__itemlevel=4)
  same => n,ExecIf($[${itempt} > 75 ]?Set(__itemlevel=3)
  same => n,ExecIf($[${itempt} > 90 ]?Set(__itemlevel=2)
  same => n,ExecIf($[${itempt} > 99 ]?Set(__itemlevel=1)
;for testing
same => n,Set(itemlevel=1)
; 
  same => n,Verbose(3, level: ${itemlevel} begin type drop)
  same => n,Set(LOCAL(itemluck)=${RAND(1,6)})
same => n,NoOp(DEBUG gohome:${gohome} itemlevel:${itemlevel} itemluck:${itemluck})
  same => n,ExecIf($[${gohome}=1]?Return)
  same => n,GosubIf($[${itemluck}>5]?itemhandle,s,1(weapon,${itemlevel}))
  same => n,ExecIf($[${gohome}=1]?Return)
  same => n,GosubIf($[${itemluck}>3]?itemhandle,s,1(torch,${itemlevel}))
  same => n,ExecIf($[${gohome}=1]?Return)
  same => n,GosubIf($[${itemluck}>2]?itemhandle,s,1(doorkeys,${itemlevel}))
  same => n,ExecIf($[${gohome}=1]?Return)
  same => n,Gosub(itemhandle,s,1(health,${itemlevel}))
  same => n,Return
;
[itemhandle]
include => hangup

exten => s,1,Verbose(3, Item is power level ${itemlevel} type is ${ARG1})
  same => n,Set(__gohome=1)
  same => n,Set(HASH(item_stats)=${GET_ITEM_STATS(${ARG1},${ARG2})})
  same => n,Playback(dungeon/items/youve-found&dungeon/items/${HASH(item_stats,item_name)})
  same => n,Background(dungeon/items/keepitem)
  same => n,Background(silence/3)
  same => n,Return

exten => 1,1,Verbose(3, ${heronum},${HASH(item_stats,item_mod_name)},${HASH(item_stats,item_points)})
  same => n,GotoIf($['${HASH(item_stats,item_type)}' = 'weapon']?weapon)
same => n,Verbose(3, Item is ${HASH(item_stats,item_name)})
  same => n,NoOp(Save item stats ${PUT_ITEM_STATS(${heronum},${ARG1},${HASH(item_stats,item_mod_name)},$[${HASH(item_stats,item_points)} + ${GET_HERO_${TOUPPER(${HASH(item_stats,item_type)})}(${heronum})}])})
  same => n,Return
;
  same => n(weapon),Verbose(3, Item is ${HASH(item_stats,item_name)})
same => n,NoOp(points:${HASH(item_stats,item_points)} name:${HASH(item_stats,item_name)})
  same => n,NoOp(Update weapon name ${PUT_NEW_WEAPON(${HASH(item_stats,item_points)},${HASH(item_stats,item_name)},${heronum})})
  same => n,Return

exten => i,1(invalid),Verbose(3,LOG ${heronum} Invalid option)
  same => n,Return

