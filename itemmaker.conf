[itemmaker]
exten => s,1,Verbose(3, Begin Item decision tree)
  same => n,Verbose(3, Monster points: ${monster_points} top value $[${monster_points}+ ${hero_luck}])
  same => n,Set(__itempt=${RAND(1,$[${monster_points}+ ${hero_luck}])})
  same => n,Verbose(3, Item point:${itempt}) 
;  same => n,Set(__itemluck=${RAND(1,${hero_luck})})
  same => n,ExecIf($[${itempt} < 10 ]?Return)
  same => n,ExecIf($[${itempt} > 9 ]?Set(__itemlevel=6)
  same => n,ExecIf($[${itempt} > 25 ]?Set(__itemlevel=5)
  same => n,ExecIf($[${itempt} > 50 ]?Set(__itemlevel=4)
  same => n,ExecIf($[${itempt} > 75 ]?Set(__itemlevel=3)
  same => n,ExecIf($[${itempt} > 90 ]?Set(__itemlevel=2)
  same => n,ExecIf($[${itempt} > 99 ]?Set(__itemlevel=1)
;hard set to 6 for testing
same => n,Set(__itemlevel=6)
;
  same => n,Verbose(3, level: ${itemlevel} begin type drop)
  same => n,Set(__itemluck=${RAND(1,6)})
;hard set to 6 for testing
;same => n,Set(__itemluck=4)
;
  same => n,GosubIf($[${itemluck}>5]?itemhandle,s,1(weapon,${itemlevel}))
  same => n,ExecIf($[${gohome}=1]?Return
  same => n,GosubIf($[${itemluck}>3]?itemhandle,s,1(torch,${itemlevel}))
  same => n,ExecIf($[${gohome}=1]?Return
  same => n,GosubIf($[${itemluck}>2]?itemhandle,s,1(keys,${itemlevel}))
  same => n,ExecIf($[${gohome}=1]?Return
  same => n,Gosub(itemhandle,s,1(health,${itemlevel}))
  same => n,Return
;
[itemhandle]
exten => s,1,Verbose(3, Item is power level ${itemlevel} type is ${ARG1})
same => n,DumpChan()
same => n,NoOp(arg1:${ARG1} arg2:${ARG2})
  same => n,Set(__gohome=1)
  same => n,Set(HASH(item_stats)=${GET_ITEM_STATS(${ARG1},${ARG2})})
  same => n,Playback(dungeon/items/youve-found&dungeon/items/${HASH(item_stats,item_name)})
  same => n,Background(dungeon/items/keepitem)
;same => n,Goto(1,1)
  same => n,Background(silence/3)
  same => n,Return

exten => 1,1,Verbose(3, ${heronum},${HASH(item_stats,item_mod_name)},${HASH(item_stats,item_points)})
same => n,NoOp(${heronum},${ARG1},${HASH(item_stats,item_points)})
  same => n,GotoIf($['${HASH(item_stats,item_type)}' = 'weapon']?weapon)
same => n,Verbose(3, Item is ${HASH(item_stats,item_name)})
  same => n,Set(__math=$[${HASH(item_stats,item_points)} + ${GET_HERO_HEALTH(${heronum})}])
  same => n,NoOp(Save item stats ${PUT_ITEM_STATS(${heronum},${ARG1},${HASH(item_stats,item_mod_name)},${math})})
  same => n,Return
;  same => n,GotoIf($['${HASH(item_stats,item_type)}' = 'health']?health)
;  same => n,GotoIf($['${HASH(item_stats,item_type)}' = 'torch']?torch)
;  same => n,GotoIf($['${HASH(item_stats,item_type)}' = 'keys']?keys)
;  same => n,Return
;
  same => n(weapon),Verbose(3, Item is ${HASH(item_stats,item_name)})
;  same => n,NoOp(Save item stats ${PUT_ITEM_STATS(${heronum},${ARG1},${HASH(item_stats,item_mod_name)},${HASH(item_stats,item_points)})})
  same => n,NoOp(Update weapon name ${PUT_NEW_WEAPON(${HASH(item_stats,item_points)},${HASH(item_stats,item_name)},${heronum})})
;  same => n,NoOp(Update weapon name ${PUT_ONE_OFF(players,weapon_name,${HASH(item_stats,item_name)},${heronum})})
  same => n,Return

  same => n(health),Verbose(3, Item is ${HASH(item_stats,item_name)})
  same => n,Set(__math=$[${HASH(item_stats,item_points)} + ${GET_HERO_HEALTH(${heronum})}])
  same => n,NoOp(Save item stats ${PUT_ITEM_STATS(${heronum},${ARG1},${HASH(item_stats,item_mod_name)},${math})})
  same => n,Return

  same => n(torch),Verbose(3, Item is ${HASH(item_stats,item_name)})
  same => n,Set(__math=$[${HASH(item_stats,item_points)} + ${GET_HERO_${TOUPPER(${HASH(item_stats,item_type)})}(${heronum})}])
  same => n,NoOp(Save item stats ${PUT_ITEM_STATS(${heronum},${ARG1},${HASH(item_stats,item_mod_name)},${math})})
  same => n,Return

  same => n(keys),Verbose(3, Item is ${HASH(item_stats,item_name)})
  same => n,Set(__math=$[${HASH(item_stats,item_points)} + ${GET_HERO_KEYS(${heronum})}])
  same => n,NoOp(Update weapon name ${PUT_ONE_OFF(players,doorkeys,${HASH(item_stats,item_points)},${heronum})})
  same => n,Return
