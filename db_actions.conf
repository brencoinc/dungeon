;Hero functions

[HERO_NEWHERO]
prefix=PUT
dsn=asterisk
readsql=INSERT INTO players (caller_id) VALUES ('${SQL_ESC(${ARG1})}')
synopsis=create a new player based on the caller ID

[HERO_NEWSESSION]
prefix=PUT
dsn=asterisk
readsql=INSERT INTO sessions (caller_id) VALUES ('${SQL_ESC(${ARG1})}')
synopsis=create a new player based on the caller ID

;[HERO_STARTPOINT]
;prefix=GET
;dsn=asterisk
;readsql=SELECT xaxis, yaxis FROM movement where thing_key = 'mapstart' and mapno = '${SQL_ESC(${ARG1})}';
;synopsis=Get starting positon based on map

[HERO_STARTPOINT]
prefix=GET
dsn=asterisk
readsql=SELECT xaxis, yaxis FROM movement where thing_key = '${SQL_ESC(${ARG1})}' and mapno = '${SQL_ESC(${ARG2})}';
synopsis=Get starting positon based on map

[HERO_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT a.hero_health,a.weapon_mod,a.weapon_name,a.hero_strength,a.torch,a.doorkeys,a.hero_agility,a.hero_luck,b.stepcount, b.mapno from players a
readsql+= join sessions b on a.caller_id=b.caller_id where a.caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return agent stats
;
[HERO_STATS]
prefix=PUT
dsn=asterisk
readsql=UPDATE players SET hero_health='${ARG1}', weapon_mod='${ARG2}', hero_agility='${ARG3}', hero_strength='${ARG4}', hero_luck='${ARG5}' WHERE caller_id='${SQL_ESC(${ARG6})}'
synopsis=Return agent stats

;
[HERO_UPDATE_HEALTH]
prefix=PUT
dsn=asterisk
readsql=update players SET hero_health=('${SQL_ESC(${ARG1})}') WHERE caller_id=('${SQL_ESC(${ARG2})}')
synopsis=update health after a battle

;
[HERO_HEALTH]
prefix=GET
dsn=asterisk
readsql=SELECT hero_health FROM players WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return Health value if this CID has an existing record. Also used to check if record exits

[HERO_DOORKEYS]
prefix=GET
dsn=asterisk
readsql=SELECT doorkeys FROM players WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return doorkeys value if this CID has an existing record.

[HERO_WEAPON]
prefix=GET
dsn=asterisk
readsql=SELECT weapon_mod FROM players player WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return Health weapons value

[HERO_TORCH]
prefix=GET
dsn=asterisk
readsql=SELECT torch FROM players WHERE caller_id='${SQL_ESC(${ARG1})}'
synopsis=Return number of torches value

[HERO_DEATH]
prefix=PUT
dsn=asterisk
readsql=DELETE FROM players, sessions USING players INNER JOIN sessions ON players.caller_id = sessions.caller_id  WHERE players.caller_id='${SQL_ESC(${ARG1})}'
synopsis=Delete player from table

[HERO_LAST_SEEN]
prefix=PUT
dsn=asterisk
readsql=update players set last_seen=CURRENT_TIMESTAMP where caller_id='${SQL_ESC(${ARG1})}'
synopsis=set the date for the last time we've seen this joker

;Movement functions

[MOVEMENT_GPS]
prefix=GET
dsn=asterisk
readsql=SELECT paths FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND yaxis='${SQL_ESC(${ARG2})}' AND mapno='${SQL_ESC(${ARG3})}'
synopsis=Return movement options

[MOVEMENT_MONSTER_KEY]
prefix=GET
dsn=asterisk
readsql=SELECT monster_key FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND
readsql+= yaxis='${SQL_ESC(${ARG2})}'
synopsis=Return monster key value

[MOVEMENT_ROOM_INFO]
prefix=GET
dsn=asterisk
;readsql=SELECT monster_key,item,doorway,trap_key FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND
readsql=SELECT thing_key FROM movement WHERE xaxis='${SQL_ESC(${ARG1})}' AND  yaxis='${SQL_ESC(${ARG2})}' AND mapno='${SQL_ESC(${ARG3})}'
synopsis=Return room item key

[MOVEMENT_FIND_FOOTPRINT]
prefix=GET
dsn=asterisk
readsql=SELECT gps_xpos,gps_ypos FROM sessions where caller_id='${SQL_ESC(${ARG1})}' AND mapno='${SQL_ESC(${ARG2})}'
synopsis=Read current location in dungeon

[MOVEMENT_SAVE_FOOTPRINT]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET gps_xpos='${SQL_ESC(${ARG1})}',gps_ypos='${SQL_ESC(${ARG2})}',mapno='${SQL_ESC(${ARG4})}' WHERE caller_id='${SQL_ESC(${ARG3})}'
synopsis=Save location in dungeon

;Monster Functions

[DUNGEON_MONSTER_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT monster_key,monster_health,monster_attack,monster_agil,monster_name,monster_poison,monster_points FROM monster WHERE monster_key='${SQL_ESC(${ARG1})}'
synopsis=Return monster stats

[DUNGEON_MONSTER_TOMBSTONE]
prefix=GET
dsn=asterisk
readsql=SELECT tombstones FROM sessions WHERE tombstones like '%${SQL_ESC(${ARG1})}%' AND caller_id='${SQL_ESC(${ARG2})}'
synopsis=Check if the monster is dead based on mkey and caller ID in sessions table

[DUNGEON_MONSTER_TOMBSTONE]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET tombstones = CONCAT(tombstones, 'm${SQL_ESC(${ARG1})}') where caller_id='${SQL_ESC(${ARG2})}'
synopsis=Put monster tombstone in session table

[DUNGEON_RANDOM_ENCOUNTER]
prefix=GET
dsn=asterisk
readsql= select a.monster_key from monster a join movement b on b.random_lvl=a.monster_level where b.xaxis='${SQL_ESC(${ARG1})}' AND b.yaxis='${SQL_ESC(${ARG2})}' AND b.mapno='${SQL_ESC(${ARG3})}' ORDER BY RAND() limit 1;

; Door Functions
[DUNGEON_SEE_DOOR]
prefix=GET
dsn=asterisk
readsql=SELECT doorway from movement where xaxis='${SQL_ESC(${ARG1})}' AND yaxis='${SQL_ESC(${ARG2})}' AND mapno='${SQL_ESC(${ARG3})}' 
synopsis=Check if door exists prior to entering room

[DUNGEON_CHECK_DOOR]
prefix=GET
dsn=asterisk
readsql=SELECT doors FROM sessions WHERE doors like '%${SQL_ESC(${ARG1})}%' AND caller_id='${SQL_ESC(${ARG2})}'
synopsis=Check if the door is open based on location in sessions table

[DUNGEON_OPEN_DOOR]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET doors = CONCAT(doors, '${SQL_ESC(${ARG1})}') where caller_id='${SQL_ESC(${ARG2})}'
synopsis=Mark open door in sessions table

;Item Functions

[ITEM_LIST]
prefix=GET
dsn=asterisk
readsql=Select items from players where caller_id = '${SQL_ESC(${ARG1})}'
synopsis=Select all items for player

[ITEM_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT item_upc,item_name,item_mod_name,item_points,item_type FROM storehouse where item_type='${SQL_ESC(${ARG1})}' AND item_level='${SQL_ESC(${ARG2})}' ORDER BY RAND() LIMIT 1
synopsis=Select item details from Storehouse table

[ITEM_STATS]
prefix=PUT
dsn=asterisk
readsql=UPDATE players SET `${SQL_ESC(${ARG3})}`='${SQL_ESC(${ARG4})}' where caller_id='${SQL_ESC(${ARG1})}'

[NEW_WEAPON]
prefix=PUT
dsn=asterisk
readsql=UPDATE players SET weapon_mod='${SQL_ESC(${ARG1})}', weapon_name='${SQL_ESC(${ARG2})}' where caller_id='${SQL_ESC(${ARG3})}'
synopsis=Sets weapon info in player table

[ONE_OFF]
prefix=PUT
dsn=asterisk
readsql=UPDATE ${SQL_ESC(${ARG1})} SET ${SQL_ESC(${ARG2})} = '${SQL_ESC(${ARG3})}' where caller_id='${SQL_ESC(${ARG4})}'
readsql=Update single value as needed

; Trap Functions
[DUNGEON_TRAP_STATS]
prefix=GET
dsn=asterisk
readsql=SELECT trap_name,trap_agil,trap_strength,trap_damage,trap_type FROM traps WHERE id='${SQL_ESC(${ARG1})}'
synopsis=Return trap stats

[DUNGEON_SPRUNG_TRAP]
prefix=GET
dsn=asterisk
readsql=SELECT traps FROM sessions WHERE traps like '%${SQL_ESC(${ARG1})}%' AND caller_id='${SQL_ESC(${ARG2})}'
synopsis=Check if the monster is dead based on mkey and caller ID in sessions table

[DUNGEON_SPRUNG_TRAP]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET traps = CONCAT(traps, '${SQL_ESC(${ARG1})}') where caller_id='${SQL_ESC(${ARG2})}'
synopsis=Put sprungtrap in session table

[DUNGEON_ITEM_CRUMBLE]
prefix=PUT
dsn=asterisk
readsql=UPDATE sessions SET cleared_rooms = CONCAT(cleared_rooms, '${SQL_ESC(${ARG1})}') where caller_id='${SQL_ESC(${ARG2})}'
synopsis=Put sprungtrap in session table

; Spell Functions
[SPELL_LOOKUP]
prefix=GET
dsn=asterisk
readsql=SELECT spell_type, spell_name, spell_strength, spell_agil, spell_casting_power, spell_sound from spells where spell_num='${SQL_ESC(${ARG1})}'
synopsis=Return all spell details
