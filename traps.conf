[trap]
include => hangup

exten => s,1(start),Verbose(3, LOG ${heronum} Has fallen into a trap!)
 same => n,Verbose(3, LOG ${heronum} trap_key is ${HASH(movement_info,trap_key)})
;same => n,GotoIf($[${EXISTS(${GET_DUNGEON_SPRUNG_TRAP(x${Xgps}y${Ygps},${heronum})})}]?sprung_trap)
;same => n,Set(HASH(trap_stats)=${GET_DUNGEON_trap_stats(${GET_MOVEMENT_MONSTER_KEY(${Xgps},${Ygps})})})
;same => n,Set(trap_name=${HASH(
 same => n,Set(ARRAY(LOCAL(trap_name),LOCAL(trap_agil),LOCAL(trap_strength),LOCAL(trap_damage),LOCAL(trap_deadly),LOCAL(trap_trap))=${GET_DUNGEON_TRAP_STATS(${HASH(movement_info,trap_key)})})
 same => n,Playback(dungeon/traps/${trap_name})
 same => n,GotoIf($["${trap_type}" = 1]?spikes)
 same => n,GotoIf($["${trap_type}" = 2]?pit)

 same => n,Goto(rubbel)
 same => n(rubbel),Verbose(3, rubbel in the way)
 same => n,Set(runaway=1)
 same => n,GotoIf($[${EXISTS(${GET_DUNGEON_SPRUNG_TRAP(x${Xgps}y${Ygps},${heronum})})}]?rubbel_sprung)
 same => n,Gosub(survive_check) 
 same => n,Playback(dungeon/traps/rubbel1)
; same => n,Set(HASH(footprints)=${GET_MOVEMENT_FIND_FOOTPRINT(${heronum})})
 same => n,Goto(sprung_trap)
 same => n(rubbel_sprung),Playback(dungeon/traps/rubbel1)
 same => n,Return
;
 same => n(spikes),Verbose(3, Spikes!)
 same => n,GotoIf($[${EXISTS(${GET_DUNGEON_SPRUNG_TRAP(x${Xgps}y${Ygps},${heronum})})}]?sprung_trap)
 same => n,Playback(dungeon/traps/spikes_start)
 same => n,Gosub(survive_check))
 same => n,Playback(dungeon/traps/spikes_survive)
 same => n,Goto(spring_trap)
;
 same => n(pit),Verbose(3, Spikes!)
 same => n,GotoIf($[${EXISTS(${GET_DUNGEON_SPRUNG_TRAP(x${Xgps}y${Ygps},${heronum})})}]?sprung_trap)
 same => n,Playback(dungeon/traps/pit_start)
 same => n,Gosub(survive_check)
 same => n,Playback(dungeon/traps/pit_survive)
 same => n,Goto(spring_trap)

 same => n(spring_trap),Verbose(3, Spring the trap!)
 same => n,NoOp(${PUT_DUNGEON_SPRUNG_TRAP(x${Xgps}y${Ygps},${heronum})})
 same => n,Return()

 same => n(survive_check),Verbose(3, Survive check)
 same => n,GotoIf($[${hero_agil} < ${trap_agil}}]?trapfail)
 same => n,NoOp(some trap survival stuff)
 same => n,Return

same => n(sprung_trap),Verbose(3,Room has a trap that has already been sprung)
same => n,NoOp(${PUT_DUNGEON_SPRUNG_TRAP(x${Xgps}y${Ygps},${heronum})})
same => n,Return

same => n(trapfail),Verbose(3, Oh no! Too slow!)
same => n,Set(herohealth=${EVAL(${MATH(${herohealth}-${trap_strength},i)})})
same => n,GosubIf($[${herohealth} < 1]?defeat)
same => n,Return

same => n(defeat),Verbose(3,LOG ${heronum} The trap has beaten you)
same => n,NoOp(play some sound here)
same => n,GoSub(defeat,s,1)
same => n,Hangup
