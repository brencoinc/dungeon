[statmaker]
exten => s,1,Verbose(3, Begin Statmaker for ${heronum})
same => n,Set(HASH(hero_stats)=${GET_HERO_STATS(${heronum})})
same => n,Set(hero_health=${HASH(hero_stats,health)})
same => n,Set(hero_weaponmod=${HASH(hero_stats,weapon_mod)})
same => n,Set(weapon_name=${HASH(hero_stats,weapon_name)})
same => n,Set(hero_strength=${HASH(hero_stats,strength)})
same => n,Set(torch=${HASH(hero_stats,torch)})
same => n,Set(Ygps=${HASH(hero_stats,gps_ypos)})
same => n,Set(Xgps=${HASH(hero_stats,gps_xpos)})
same => n,Set(doorkeys=${HASH(hero_stats,doorkeys)})
same => n,Set(hero_agil=${HASH(hero_stats,agility)})
same => n,Set(hero_luck=${HASH(hero_stats,hero_luck)})
;
same => n(distribute),Verbose(3, LOG ${heronum} begin point distribution)
same => n,Set(tempvar=${totalpts})
same => n,Gosub(stats_distribute,s,1)
same => n,Gotoif($[${totalpts}=0]?savestats,s,1)
same => n(ralphwiggum),Playback(dungeon/stats/badatmath)
same => n,Gosub(stats_zero-out,s,1)
same => n,Goto(distribute)

[stats_postbattle]
exten => s,1,Verbose(3, LOG ${heronum} Distribute points post battle)
same => n(distribute),Set(totalpts=${monster_points})
same => n,Gosub(statmaker,s,1)
same => n,Set(Xgps=${HASH(footprints,gps_xpos)})
same => n,Set(ygps=${HASH(footprints,gps_ypos)})
same => n,Return

[stats_distribute]
exten => s,1,Verbose(3, LOG ${heronum} Distribute stat points)
same => n,Gosub(stats_zero-out,s,1)
same => n,Playback(dungeon/stats/youhave)
same => n,Saydigits(${totalpts})
same => n,Playback(dungeon/stats/pointsleft) 
;
same => n,Set(stat=health)
same => n,Gosub(stats_statloop,s,1)
same => n,GotoIf($[${totalpts}<1]?noneleft)
;
same => n,Set(stat=agil)
same => n,Gosub(stats_statloop,s,1)
same => n,GotoIf($[${totalpts}<1]?noneleft)
;
same => n,Set(stat=strength)
same => n,Gosub(stats_statloop,s,1)
same => n,GotoIf($[${totalpts}<1]?noneleft)
;
same => n,Set(stat=luck)
same => n,Gosub(stats_statloop,s,1)
same => n,GotoIf($[${totalpts}<1]?noneleft)
same => n,Return
;
same => n(noneleft),Verbose(3 ${heronum} No points left to distribute)
same => n,Return

[stats_statloop]
exten => s,1,Verbose(3 Stat shortener)
same => n,Read(statnum,dungeon/stats/${stat},2,,,5) ; set stat
same => n,ExecIf(${ISNULL(${statnum})}?Set(statnum=0))
same => n,NoOp(stat:${stat} statnm:${statnum} hero_stat:${hero_${stat}} math ${MATH(${hero_${stat}}+${statnum},i)})
same => n,Saydigits(${MATH(${hero_${stat}}+${statnum},i)})
same => n,Set(totalpts=${MATH(${totalpts}-${statnum},i)})
same => n,Set(${stat}=${statnum})
same => n,NoOp(Debug H:${health} WM:${hero_weaponmod} A:${agil} S:${strength} L:${luck})
same => n,Playback(dungeon/stats/youhave)
same => n,Saydigits(${totalpts})
same => n,Playback(dungeon/stats/pointsleft)
same => n,Return


[savestats]
exten => s,1,Verbose(3 Save stats)
same => n,NoOp(H:${MATH(${hero_health}+${health},i)},WM:${hero_weaponmod},A:${MATH(${hero_agil}+${agil},i)},S:${MATH(${hero_strength}+${strength},i)},L:${MATH(${hero_luck}+${luck},i)})
same => n,NoOp(Write values to record ${PUT_HERO_STATS(${MATH(${hero_health}+${health},i)},${hero_weaponmod},${MATH(${hero_agil}+${agil},i)},${MATH(${hero_strength}+${strength},i)},${MATH(${hero_luck}+${luck},i)},${heronum})})
same => n,Set(totalpts=0)
same => n,Return

[stats_zero-out]
exten => s,1,Verbose(3 reset all stats)
same => n,Set(health=0)
same => n,Set(agil=0)
same => n,Set(strength=0)
same => n,Set(luck=0)
same => n,Set(totalpts=${tempvar})
same => n,Set(monster_points=0)
same => n,NoOp(valucheck xgps=${Xgps} ygps=${Ygps} heronum=${heronum} totalpts=${totalpts})
same => n,Return

