[statmaker]
exten => s,1,Verbose(3, Begin Statmaker for ${heronum})
same => n,Set(HASH(hero_stats)=${GET_HERO_STATS(${heronum})})
same => n,Set(hero_health=${HASH(hero_stats,health)})
same => n,Set(hero_weaponmod=${HASH(hero_stats,weapon_mod)})
same => n,Set(weapon_name=${HASH(hero_stats,weapon_name)})
same => n,Set(hero_strength=${HASH(hero_stats,strength)})
same => n,Set(torch=${HASH(hero_stats,torch)})
same => n,Set(Ygps=${HASH(hero_stats,gps_ypos)})
same => n,Set(Xgps=${HASH(hero_stats,gps_xpos)})
same => n,Set(doorkeys=${HASH(hero_stats,doorkeys)})
same => n,Set(hero_agil=${HASH(hero_stats,agility)})
same => n,Set(hero_luck=${HASH(hero_stats,hero_luck)})
;
same => n(distribute),Set(totalpts=100)
same => n,Gosub(stats_distribute,s,1)
same => n,Gotoif($[${totalpts}=0]?savestats,s,1)
same => n(ralphwiggum),Playback(dungeon/stats/badatmath)
same => n,Goto(distribute)

[stats_postbattle]
exten => s,1,Verbose(3 ${heronum} Distribute stats post battle)
same => n(distribute),Set(totalpts=${})
same => n,Gosub(stats_distribute,s,1)
same => n,Gotoif($[${totalpts}=0]?savestats,s,1)
same => n(ralphwiggum),Playback(dungeon/stats/badatmath)
same => n,Goto(distribute)

[stats_distribute]
exten => s,1,Verbose(3 ${heronum} Distribute stat points)
same => n,Playback(dungeon/stats/youhave)
same => n,Saydigits(${totalpts})
same => n,Playback(dungeon/stats/pointsleft) 
same => n,Read(health,dungeon/stats/health,2,,,5) ; set health
same => n,Saydigits(${MATH(${hero_health}+${health},i)})
same => n,Set(totalpts=${MATH(${totalpts}-${health},i)})
same => n,Playback(dungeon/stats/youhave)
same => n,Saydigits(${totalpts})
same => n,Playback(dungeon/stats/pointsleft)
same => n,Read(agility,dungeon/stats/agility,2,,,5) ; set agility
same => n,Saydigits(${MATH(${hero_agil}+${agility},i)})
same => n,Set(totalpts=${MATH(${totalpts}-${agility},i)})
same => n,Playback(dungeon/stats/youhave)
same => n,Saydigits(${totalpts})
same => n,Playback(dungeon/stats/pointsleft)
same => n,Read(strength,dungeon/stats/stength,2,,,5) ; set strength
same => n,Saydigits(${MATH(${hero_strength}+${strength},i)}) 
same => n,Set(totalpts=${MATH(${totalpts}-${strength},i)})
same => n,Playback(dungeon/stats/youhave)
same => n,Saydigits(${totalpts})
same => n,Playback(dungeon/stats/pointsleft)
same => n,Read(luck,dungeon/stats/luck,2,,,5) ; modifies hero_luck
same => n,Saydigits(${MATH(${hero_luck}+${luck},i)})
same => n,Set(totalpts=${MATH(${totalpts}-${luck},i)})
same => n,Return
same => n,Gotoif($[${totalpts}=0]?savestats,s,1)
;

same => n(ralphwiggum),Playback(dungeon/stats/badatmath)
same => n,Goto(1)


[savestats]
exten => s,1,Verbose(3 Save stats)
;same => n,Playback()
;same => n,NoOp(Write health to record ${PUT_HERO_UPDATE_HEALTH($[${herohealth}+${health}],${heronum})})
same => n,NoOp(H:${MATH(${hero_health}+${health},i)},WM:${hero_weaponmod},A:${MATH(${hero_agil}+${agility},i)},S:${MATH(${hero_strength}+${strength},i)},L:${MATH(${hero_luck}+${luck},i)})
same => n,NoOp(Write values to record ${PUT_HERO_STATS(${MATH(${hero_health}+${health},i)},${hero_weaponmod},${MATH(${hero_agil}+${agility},i)},${MATH(${hero_strength}+${strength},i)},${MATH(${hero_luck}+${luck},i)},${heronum})})
same => n,Return
