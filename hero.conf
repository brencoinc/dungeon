[hero]
include => hangup

[hero_start]
include => hangup

exten => s,1,Verbose(3,Basic game settings and Hero info lookup) 
;same => n,Set(encounter=0)
same => n,Set(attack=1)
same => n,Set(fighthealth=0)
same => n,Set(target=ghost)
same => n,Set(deadmonster=0)
same => n,Set(gohome=0)
same => n,Set(runaway=0)
same => n,Set(monsterhealth=0)
same => n,Set(heronum=${CALLERID(num)})
;check session id for current game
same => n,Set(HASH(hero_stats)=${GET_HERO_STATS(${heronum})})
same => n,GosubIf(${ISNULL(${HASH(hero_stats,hero_health)})}?newplayer)
same => n,Verbose(3, LOG ${heronum} updating last_seen ${PUT_HERO_LAST_SEEN(${heronum})})
;
same => n(readyplayerone),Verbose(3, Existing player get stats)
same => n,Set(herohealth=${HASH(hero_stats,hero_health)})
same => n,Set(heroweapon=${HASH(hero_stats,weapon_mod)})
same => n,Set(weapon_name=${HASH(hero_stats,weapon_name)})
same => n,Set(torch=${HASH(hero_stats,torch)})
same => n,Set(doorkeys=${HASH(hero_stats,doorkeys)})
same => n,Set(hero_agil=${HASH(hero_stats,hero_agility)})
same => n,Set(hero_luck=${MATH(${HASH(hero_stats,hero_luck)}/20,i)})
same => n,Set(MAPNO=${HASH(hero_stats,mapno)})
same => n,Set(stepcount=${HASH(hero_stats,stepcount)})
same => n,Set(HASH(xy_gps)=${GET_MOVEMENT_FIND_FOOTPRINT(${heronum},${MAPNO})})
same => n,Set(Xgps=${HASH(xy_gps,gps_xpos)})
same => n,Set(Ygps=${HASH(xy_gps,gps_ypos)})
same => n,Set(mXgps=${Xgps})
same => n,Set(mYgps=${Ygps})
same => n,Set(POISON_COUNTER=0)
same => n,Set(POISON_DAMAGE=0)
;skip the explainer to save time
same => n,Return
same => n,Goto(explainer)
;
same => n(newplayer),Verbose(3,New player)
same => n,GosubIf($[${ISNULL(${heronum})} || $[${LEN(${heronum})} < 5]]?numprompt)
;same => n,Gosub(introduction,s,1)
same => n,Playback(dungeon/explainer)
;Insert into DB, set timout variable then start over
same => n,NoOp(Add Player to DB ${PUT_HERO_NEWHERO(${heronum})})
same => n,NoOp(Add Player to DB ${PUT_HERO_NEWSESSION(${heronum})})
same => n,Set(MAPNO=1)
same => n,Set(ARRAY(Xgps,Ygps)=${GET_HERO_STARTPOINT(startpos,${MAPNO})})
same => n,NoOp(Add location to DB ${PUT_MOVEMENT_SAVE_FOOTPRINT(${Xgps},${Ygps},${heronum},${MAPNO})})
same => n,Set(totalpts=100)
;disable to speed up testing
same => n,Gosub(statmaker,s,1)
;
same => n,Return
;same => n,Goto(readyplayerone)
;
same => n(numprompt),Read(heronum,dungeon/stats/enternum,15,,3,10)
same => n,ExecIf($[${ISNULL(${heronum} || $[${LEN(${heronum})} < 5]]?Hangup)
same => n,Return
same => n(resurrection),Verobose(3, ${heronum} Back from the dead)

same => n,Hangup
;if it returns play "something is wrong" and send an error email 
;
same => n(explainer),Verbose(3, Stat Explainer)
same => n,Background(dungeon/stats/health)
same => n,SayNumber(${herohealth})
same => n,Background(dungeon/items/weapon_name)
same => n,Background(dungeon/weapons/${weapon_name})
same => n,Background(dungeon/stats/weapon_mod)
same => n,SayNumber(${heroweapon})
same => n,Background(dungeon/items/torch)
same => n,SayNumber(${torch})
same => n,Background(dungeon/stats/doorkeys)
same => n,SayNumber(${doorkeys})
same => n,Return

[introduction]
exten => s,1,Verbose(3, ${heronum} Welcome new player)
  same => n,Playback(dungeon/stats/welcome)
  same => n,Read(answer,dungeon/stats/opencase,1,,5)
  same => n,ExecIf($[${answer} = 1]?Return)
  same => n,Read(answer,dungeon/stats/createcaseno,,,1,5)
  same => n,ExecIf($[${answer} = 1]?GoSub(hero_start,s,numprompt)
  same => n,Background(dungeon/stats/explain&dungeon/stats/explainstats&dungeon/stats/explainweapons)
;  same => n,Background(dungeon/stats/explainstats) 
;  same => n,Background(dungeon/stats/explainweapons)
  same => n,Return

exten => 1,1,NoOp(Exit introduction)
  same => n,Return
