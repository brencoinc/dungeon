[hero]
include => hangup

[hero_start]
include => hangup

exten => s,1,Verbose(3,Basic game settings and Hero info lookup) 
;same => n,Set(encounter=0)
same => n,Set(attack=1)
same => n,Set(fighthealth=0)
same => n,Set(target=ghost)
same => n,Set(deadmonster=0)
same => n,Set(gohome=0)
same => n,Set(runaway=0)
same => n,Set(monsterhealth=0)
same => n,Set(heronum=${CALLERID(num)})
;check session id for current game
same => n,GosubIf($[${ISNULL(${GET_HERO_HEALTH(${heronum})})}]?newplayer)
same => n,Verbose(3, LOG ${heronum} updating last_seen ${PUT_HERO_LAST_SEEN(${heronum})})
;same => n,GosubIf($[${GET_HERO_HEALTH(${heronum})} < 0]?resurrection)
;
same => n(readyplayerone),Verbose(3, Existing player get stats)
same => n,Set(HASH(hero_stats)=${GET_HERO_STATS(${heronum})})
same => n,Set(herohealth=${HASH(hero_stats,hero_health)})
same => n,Set(heroweapon=${HASH(hero_stats,weapon_mod)})
same => n,Set(weapon_name=${HASH(hero_stats,weapon_name)})
same => n,Set(torch=${HASH(hero_stats,torch)})
same => n,Set(doorkeys=${HASH(hero_stats,doorkeys)})
same => n,Set(hero_agil=${HASH(hero_stats,hero_agility)})
same => n,Set(hero_luck=${MATH(${HASH(hero_stats,hero_luck)}/20,i)})
same => n,Set(HASH(xy_gps)=${GET_MOVEMENT_FIND_FOOTPRINT(${heronum})})
same => n,Set(Xgps=${HASH(xy_gps,gps_xpos)})
same => n,Set(Ygps=${HASH(xy_gps,gps_ypos)})
;same => n,Set(ARRAY(mXgps,mYgps=${Xgps},${Ygps}))
same => n,Set(mXgps=${Xgps})
same => n,Set(mYgps=${Ygps})
same => n,Set(POISON_COUNTER=0)
;skip the explainer to save time
same => n,Return
same => n,Goto(explainer)
;
same => n(newplayer),Verbose(3,New player)
same => n,GosubIf(${ISNULL(${heronum}) || $[${LEN(${heronum})} < 5]?numprompt)
;Insert into DB, set timout variable then start over
same => n,NoOp(Add Player to DB ${PUT_HERO_NEWHERO(${heronum})})
same => n,NoOp(Add Player to DB ${PUT_HERO_NEWSESSION(${heronum})})
same => n,Set(totalpts=100)
;disable to speed up testing
same => n,Gosub(statmaker,s,1)
;
same => n,Return
;same => n,Goto(readyplayerone)
;
same => n(numprompt),Read(heronum,dungeon/stats/enternum,15,,3,10)
same => n,ExecIf(${ISNULL(${heronum} || $[${LEN(${heronum})} < 5]?Hangup)
same => n,Return
same => n(resurrection),Verobose(3, ${heronum} Back from the dead)

same => n,Hangup
;if it returns play "something is wrong" and send an error email 
;
same => n(explainer),Verbose(3, Stat Explainer)
same => n,Background(dungeon/stats/health)
same => n,SayDigits(${herohealth})
same => n,Background(dungeon/items/weapon_name)
same => n,Background(dungeon/weapons/${weapon_name})
same => n,Background(dungeon/stats/weapon_mod)
same => n,SayDigits(${heroweapon})
same => n,Background(dungeon/items/torch)
same => n,SayDigits(${torch})
same => n,Background(dungeon/stats/doorkeys)
same => n,SayDigits(${doorkeys})
same => n,Return

[defeat]
exten => s,1,Verbose(3, You have been bested by the ${monstername})
 same => n,Background(dungeon/stats/deathoptions)
 same => n,Goto(1,1)
 same => n,Hangup

exten => 1,1,Verbose(3, Start over)
 same => n,NoOp(Delete player from DB ${PUT_HERO_DEATH(${heronum})})
 same => n,Goto(hero_start,s,1)
 same => n,Hangup

exten => 2,1,Verbose(3, Restart the maze)
; same => n,NoOp(Write health to record ${PUT_HERO_UPDATE_HEALTH(${MATH(${herohealth}/2)},${heronum})})
 same => n,NoOp(Reset to first position ${PUT_MOVEMENT_SAVE_FOOTPRINT(5,1,${heronum})}))
 same => n,Goto(hero_start,s,1)
 same => n,Hangup

;exten => 3,1,Verbose(3, Roll the dice!)
; same = n,
